package entity;

import main.GamePanel;
import java.awt.*;

public class Particle extends OBject { // Inherits from OBject

    GameObject generator; // Can be generated by any GameObject
    Color color;
    int particleSize; // Renamed from 'size' to avoid conflict if GameObject has a 'size'
    int xd;
    int yd;
    int life; // Particle's own life, not from Character
    int maxLife;
    int speed;


    public Particle(GamePanel gp, GameObject generator, Color color, int size, int speed, int maxLife, int xd, int yd) {
        super(gp);
        this.name = "Particle";
        this.type = type_particle;
        this.generator = generator;
        this.color = color;
        this.particleSize = size;
        this.speed = speed;
        this.maxLife = maxLife;
        this.life = this.maxLife;
        this.xd = xd;
        this.yd = yd;

        // Position particle at the center of the generator
        if (generator != null) {
            int offset = (gp.tileSize / 2) - (particleSize / 2);
            worldX = generator.worldX + offset;
            worldY = generator.worldY + offset;
        } else { // Fallback if generator is null
            worldX = 0;
            worldY = 0;
        }
        this.collision = false; // Particles usually don't collide in a complex way
    }

    @Override
    public void update() {
        life--;

        if (life < maxLife / 3) {
            yd++; // Fall down faster
            if(particleSize > 1) particleSize--; // Shrink
        }

        worldX += xd * speed;
        worldY += yd * speed;

        if (life <= 0) {
            // Needs a way to be removed from gp.particleList
            // For example, add a boolean 'isAlive' or 'toBeRemoved'
            // gp.particleList.remove(this); // This can cause ConcurrentModificationException if iterating
            // A common pattern is to add to a "toBeRemoved" list and process that after updates.
            // For simplicity, GamePanel's update loop should handle removing dead particles.
            // We can mark it as not 'drawing' or use an 'alive' flag if GameObject has one.
            this.drawing = false; // Stop drawing it, GamePanel can clean up non-drawing particles
        }
    }

    @Override
    public void draw(Graphics2D g2) {
        if (!drawing || !inCamera()) return; // Use drawing flag from GameObject

        int screenX = getScreenX();
        int screenY = getScreenY();

        g2.setColor(color);
        g2.fillRect(screenX, screenY, particleSize, particleSize);
    }
}